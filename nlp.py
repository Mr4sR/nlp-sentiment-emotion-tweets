# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1MvmaVS2UtjoRrveiC-y-bSHOptxLxKi5

Nama : Ahmad Sofiyurrohman

Sumber Dataset : Kaggle

sentiment-emotion-labelled_Dell_tweets.csv
https://www.kaggle.com/datasets/ankitkumar2635/sentiment-and-emotions-of-tweets
"""

import pandas as pd
import numpy as np
import tensorflow as tf
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from tensorflow.keras.layers import LSTM,Dense,Embedding,Dropout
from tensorflow.keras.preprocessing.text import Tokenizer
from tensorflow.keras.models import Sequential
from tensorflow.keras.preprocessing.sequence import pad_sequences
from tensorflow.keras.optimizers import Adam

df = pd.read_csv('/content/sentiment-emotion-labelled_Dell_tweets.csv', sep=',')
df.head()

class myCallback(tf.keras.callbacks.Callback):
  def on_epoch_end(self, epoch, logs={}):
    if(logs.get('accuracy')>0.95):
      print("\nAkurasi telah mencapai >90%!")
      self.model.stop_training = True
callbacks = myCallback()

df['emotion'].value_counts()

df = df.drop(columns=[
    'Unnamed: 0',
    'Datetime',
    'Tweet Id',
    'Username',
    'sentiment',
    'sentiment_score',
    'emotion_score'])

df.head()

emotion = pd.get_dummies(df['emotion'])
new_df = pd.concat([df, emotion], axis=1)
new_df = new_df.drop(columns='emotion')
new_df

tweetsText = new_df['Text'].astype(str)
tweetsEmot = new_df[[
       'anger', 'anticipation', 'disgust', 'fear', 'joy', 'optimism', 'sadness', 'surprise']].values

tweetsText_train, tweetsText_test, tweetsEmot_train, tweetsEmot_test = train_test_split(tweetsText, tweetsEmot, test_size=0.2)

tokenizer = Tokenizer(num_words=5000, oov_token='<oov>')
tokenizer.fit_on_texts(tweetsText_train)
tokenizer.fit_on_texts(tweetsText_test)

sekuens_train = tokenizer.texts_to_sequences(tweetsText_train)
sekuens_test = tokenizer.texts_to_sequences(tweetsText_test)

padded_train = pad_sequences(sekuens_train)
padded_test = pad_sequences(sekuens_test)

model = tf.keras.models.Sequential([
    tf.keras.layers.Embedding(input_dim=5000, output_dim=16),
    tf.keras.layers.LSTM(64),
    tf.keras.layers.Dense(128, activation='relu'),
    tf.keras.layers.Dropout(0.5),
    tf.keras.layers.Dense(8, activation='softmax')
])

model.compile(optimizer = 'Adam',loss ='categorical_crossentropy',metrics = ['accuracy'])


model.summary()

history = model.fit(
    padded_train,
    tweetsEmot_train,
    epochs=50,
    validation_data=(padded_test, tweetsEmot_test),
    verbose=2,
    batch_size=128,
    callbacks=[callbacks]
  )

plt.plot(history.history['loss'])
plt.plot(history.history['val_loss'])
plt.title('Model loss')
plt.ylabel('Loss')
plt.xlabel('Epoch')
plt.legend(['Train'], loc='upper right')
plt.show()

plt.plot(history.history['accuracy'])
plt.plot(history.history['val_accuracy'])
plt.title('Model accuracy')
plt.ylabel('Accuracy')
plt.xlabel('Epoch')
plt.legend(['Train'], loc='lower right')
plt.show()